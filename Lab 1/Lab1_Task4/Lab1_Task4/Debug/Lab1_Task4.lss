
Lab1_Task4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000190  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000190  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000028  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000002d  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000f9  00000000  00000000  00000267  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000ac  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000c9  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  000004d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000b4  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000050  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e9       	ldi	r30, 0x90	; 144
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  7a:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <calculate_ocr>:
			}
		}
    }
}

int calculate_ocr(int duty_cycle) {
  82:	38 2f       	mov	r19, r24
  84:	22 27       	eor	r18, r18
  86:	a9 01       	movw	r20, r18
  88:	48 1b       	sub	r20, r24
  8a:	59 0b       	sbc	r21, r25
  8c:	ca 01       	movw	r24, r20
  8e:	64 e6       	ldi	r22, 0x64	; 100
  90:	70 e0       	ldi	r23, 0x00	; 0
  92:	0e 94 9f 00 	call	0x13e	; 0x13e <__divmodhi4>
  96:	86 2f       	mov	r24, r22
  98:	97 2f       	mov	r25, r23
	return duty_cycle * 255 / 100;
  9a:	08 95       	ret

0000009c <main>:

#include <avr/io.h>


int main(void)
{
  9c:	af 92       	push	r10
  9e:	bf 92       	push	r11
  a0:	cf 92       	push	r12
  a2:	df 92       	push	r13
  a4:	ef 92       	push	r14
  a6:	ff 92       	push	r15
  a8:	0f 93       	push	r16
  aa:	1f 93       	push	r17
  ac:	df 93       	push	r29
  ae:	cf 93       	push	r28
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
  b4:	2e 97       	sbiw	r28, 0x0e	; 14
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	f8 94       	cli
  ba:	de bf       	out	0x3e, r29	; 62
  bc:	0f be       	out	0x3f, r0	; 63
  be:	cd bf       	out	0x3d, r28	; 61
    // PD5 as output
	DDRB |= 1 << DDB3;
  c0:	e7 e3       	ldi	r30, 0x37	; 55
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	88 60       	ori	r24, 0x08	; 8
  c8:	80 83       	st	Z, r24
	
	// TIMER0 INIT
	// Set Fast PWM mode
	TCCR0 |= (1 << WGM00) | (1 << WGM01);
  ca:	e3 e5       	ldi	r30, 0x53	; 83
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	88 64       	ori	r24, 0x48	; 72
  d2:	80 83       	st	Z, r24
	// Clear OC0 on Compare Match, set OC0 at BOTTOM
	TCCR0 |= 1 << COM01;
  d4:	80 81       	ld	r24, Z
  d6:	80 62       	ori	r24, 0x20	; 32
  d8:	80 83       	st	Z, r24
	// Clk source = clk/1024 => 15625Hz = 64us/cycle
	// Counting from 0-255 => 64us * 255 = 16320us = 16.32ms
	TCCR0 |= (1 << CS00) | (1 << CS02);
  da:	80 81       	ld	r24, Z
  dc:	85 60       	ori	r24, 0x05	; 5
  de:	80 83       	st	Z, r24
	
	// Output compare values required
	int duty_cycles[] = {10, 20, 30, 40, 50, 75, 100};
  e0:	de 01       	movw	r26, r28
  e2:	11 96       	adiw	r26, 0x01	; 1
  e4:	e0 e6       	ldi	r30, 0x60	; 96
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	8e e0       	ldi	r24, 0x0E	; 14
  ea:	01 90       	ld	r0, Z+
  ec:	0d 92       	st	X+, r0
  ee:	81 50       	subi	r24, 0x01	; 1
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x4e>
  f2:	ee 24       	eor	r14, r14
  f4:	ff 24       	eor	r15, r15
	
    while (1) 
    {
		for (int i = 0; i < 7; i++) {
			for (int j = 0; j < 200; j++) {
				OCR0 = calculate_ocr(duty_cycles[i]);
  f6:	5e 01       	movw	r10, r28
  f8:	08 94       	sec
  fa:	a1 1c       	adc	r10, r1
  fc:	b1 1c       	adc	r11, r1
  fe:	cc 24       	eor	r12, r12
 100:	dd 24       	eor	r13, r13
 102:	0c e5       	ldi	r16, 0x5C	; 92
 104:	10 e0       	ldi	r17, 0x00	; 0
 106:	0f c0       	rjmp	.+30     	; 0x126 <main+0x8a>
 108:	f8 01       	movw	r30, r16
 10a:	80 83       	st	Z, r24
	int duty_cycles[] = {10, 20, 30, 40, 50, 75, 100};
	
    while (1) 
    {
		for (int i = 0; i < 7; i++) {
			for (int j = 0; j < 200; j++) {
 10c:	2f 5f       	subi	r18, 0xFF	; 255
 10e:	3f 4f       	sbci	r19, 0xFF	; 255
 110:	28 3c       	cpi	r18, 0xC8	; 200
 112:	31 05       	cpc	r19, r1
 114:	c9 f7       	brne	.-14     	; 0x108 <main+0x6c>
	// Output compare values required
	int duty_cycles[] = {10, 20, 30, 40, 50, 75, 100};
	
    while (1) 
    {
		for (int i = 0; i < 7; i++) {
 116:	08 94       	sec
 118:	e1 1c       	adc	r14, r1
 11a:	f1 1c       	adc	r15, r1
 11c:	f7 e0       	ldi	r31, 0x07	; 7
 11e:	ef 16       	cp	r14, r31
 120:	f1 04       	cpc	r15, r1
 122:	0c f0       	brlt	.+2      	; 0x126 <main+0x8a>
 124:	76 01       	movw	r14, r12
			for (int j = 0; j < 200; j++) {
				OCR0 = calculate_ocr(duty_cycles[i]);
 126:	c7 01       	movw	r24, r14
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	f5 01       	movw	r30, r10
 12e:	e8 0f       	add	r30, r24
 130:	f9 1f       	adc	r31, r25
 132:	80 81       	ld	r24, Z
 134:	91 81       	ldd	r25, Z+1	; 0x01
 136:	0e 94 41 00 	call	0x82	; 0x82 <calculate_ocr>
 13a:	96 01       	movw	r18, r12
 13c:	e5 cf       	rjmp	.-54     	; 0x108 <main+0x6c>

0000013e <__divmodhi4>:
 13e:	97 fb       	bst	r25, 7
 140:	09 2e       	mov	r0, r25
 142:	07 26       	eor	r0, r23
 144:	0a d0       	rcall	.+20     	; 0x15a <__divmodhi4_neg1>
 146:	77 fd       	sbrc	r23, 7
 148:	04 d0       	rcall	.+8      	; 0x152 <__divmodhi4_neg2>
 14a:	0c d0       	rcall	.+24     	; 0x164 <__udivmodhi4>
 14c:	06 d0       	rcall	.+12     	; 0x15a <__divmodhi4_neg1>
 14e:	00 20       	and	r0, r0
 150:	1a f4       	brpl	.+6      	; 0x158 <__divmodhi4_exit>

00000152 <__divmodhi4_neg2>:
 152:	70 95       	com	r23
 154:	61 95       	neg	r22
 156:	7f 4f       	sbci	r23, 0xFF	; 255

00000158 <__divmodhi4_exit>:
 158:	08 95       	ret

0000015a <__divmodhi4_neg1>:
 15a:	f6 f7       	brtc	.-4      	; 0x158 <__divmodhi4_exit>
 15c:	90 95       	com	r25
 15e:	81 95       	neg	r24
 160:	9f 4f       	sbci	r25, 0xFF	; 255
 162:	08 95       	ret

00000164 <__udivmodhi4>:
 164:	aa 1b       	sub	r26, r26
 166:	bb 1b       	sub	r27, r27
 168:	51 e1       	ldi	r21, 0x11	; 17
 16a:	07 c0       	rjmp	.+14     	; 0x17a <__udivmodhi4_ep>

0000016c <__udivmodhi4_loop>:
 16c:	aa 1f       	adc	r26, r26
 16e:	bb 1f       	adc	r27, r27
 170:	a6 17       	cp	r26, r22
 172:	b7 07       	cpc	r27, r23
 174:	10 f0       	brcs	.+4      	; 0x17a <__udivmodhi4_ep>
 176:	a6 1b       	sub	r26, r22
 178:	b7 0b       	sbc	r27, r23

0000017a <__udivmodhi4_ep>:
 17a:	88 1f       	adc	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	5a 95       	dec	r21
 180:	a9 f7       	brne	.-22     	; 0x16c <__udivmodhi4_loop>
 182:	80 95       	com	r24
 184:	90 95       	com	r25
 186:	bc 01       	movw	r22, r24
 188:	cd 01       	movw	r24, r26
 18a:	08 95       	ret

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
