
Lab1_Task6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  000001a2  2**0
                  ALLOC
  2 .debug_aranges 00000028  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000036  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000014c  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000e7  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001a7  00000000  00000000  00000433  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  000005dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000eb  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000030  00000000  00000000  000006f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00000727  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
volatile int ledMode;

int main(void)
{
    // PB3 as output for LED
	DDRB |= 1 << DDB3;
  7c:	e7 e3       	ldi	r30, 0x37	; 55
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	80 81       	ld	r24, Z
  82:	88 60       	ori	r24, 0x08	; 8
  84:	80 83       	st	Z, r24
	// PD3 as input from push button
	DDRD &= ~(1 << DDD3);
  86:	e1 e3       	ldi	r30, 0x31	; 49
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	87 7f       	andi	r24, 0xF7	; 247
  8e:	80 83       	st	Z, r24
	
	// INTERRUPT INIT
	//============================================================
	// Set INT1 as external interrupt
	GICR |= 1 << INT1;
  90:	eb e5       	ldi	r30, 0x5B	; 91
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 68       	ori	r24, 0x80	; 128
  98:	80 83       	st	Z, r24
	// Interrupt request on rising edge of INT1
	MCUCR |= (1 << ISC11) | (1 << ISC10);
  9a:	e5 e5       	ldi	r30, 0x55	; 85
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	8c 60       	ori	r24, 0x0C	; 12
  a2:	80 83       	st	Z, r24
	// Enable global interrupt
	sei();
  a4:	78 94       	sei
	
	ledMode = 1;
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	90 93 61 00 	sts	0x0061, r25
  ae:	80 93 60 00 	sts	0x0060, r24
	
    while (1) 
    {
		// Toggle LED on and off
		if (ledMode) {
			PORTB |= 1 << PORTB3;
  b2:	e8 e3       	ldi	r30, 0x38	; 56
  b4:	f0 e0       	ldi	r31, 0x00	; 0
	ledMode = 1;
	
    while (1) 
    {
		// Toggle LED on and off
		if (ledMode) {
  b6:	80 91 60 00 	lds	r24, 0x0060
  ba:	90 91 61 00 	lds	r25, 0x0061
  be:	89 2b       	or	r24, r25
  c0:	21 f0       	breq	.+8      	; 0xca <main+0x4e>
			PORTB |= 1 << PORTB3;
  c2:	80 81       	ld	r24, Z
  c4:	88 60       	ori	r24, 0x08	; 8
  c6:	80 83       	st	Z, r24
  c8:	f6 cf       	rjmp	.-20     	; 0xb6 <main+0x3a>
		} else {
			PORTB &= ~(1 << PORTB3);
  ca:	80 81       	ld	r24, Z
  cc:	87 7f       	andi	r24, 0xF7	; 247
  ce:	80 83       	st	Z, r24
  d0:	f2 cf       	rjmp	.-28     	; 0xb6 <main+0x3a>

000000d2 <__vector_2>:
		}
    }
}

ISR (INT1_vect) {
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	2f 93       	push	r18
  de:	3f 93       	push	r19
  e0:	4f 93       	push	r20
  e2:	5f 93       	push	r21
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
  e8:	28 eb       	ldi	r18, 0xB8	; 184
  ea:	3b e0       	ldi	r19, 0x0B	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ec:	4c e2       	ldi	r20, 0x2C	; 44
  ee:	51 e0       	ldi	r21, 0x01	; 1
  f0:	ca 01       	movw	r24, r20
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <__vector_2+0x20>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fa:	d1 f7       	brne	.-12     	; 0xf0 <__vector_2+0x1e>
	_delay_ms(300);
	ledMode ^= 1;
  fc:	80 91 60 00 	lds	r24, 0x0060
 100:	90 91 61 00 	lds	r25, 0x0061
 104:	21 e0       	ldi	r18, 0x01	; 1
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	82 27       	eor	r24, r18
 10a:	93 27       	eor	r25, r19
 10c:	90 93 61 00 	sts	0x0061, r25
 110:	80 93 60 00 	sts	0x0060, r24
}
 114:	9f 91       	pop	r25
 116:	8f 91       	pop	r24
 118:	5f 91       	pop	r21
 11a:	4f 91       	pop	r20
 11c:	3f 91       	pop	r19
 11e:	2f 91       	pop	r18
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
