
Lab1_Task3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000111  00000000  00000000  00000139  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000b4  00000000  00000000  0000024a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000164  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000464  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d2  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000040  00000000  00000000  00000556  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  00000596  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  6c:	1f 93       	push	r17
	// PA0 as output
    DDRA |= 1 << DDA0;
  6e:	ea e3       	ldi	r30, 0x3A	; 58
  70:	f0 e0       	ldi	r31, 0x00	; 0
  72:	80 81       	ld	r24, Z
  74:	81 60       	ori	r24, 0x01	; 1
  76:	80 83       	st	Z, r24
		//} else {
			//PORTA &= ~(1 << PORTA0);
		//}
		
		// Toggle on push
		if (PINA & 1 << PINA1) {
  78:	e9 e3       	ldi	r30, 0x39	; 57
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	68 eb       	ldi	r22, 0xB8	; 184
  7e:	7b e0       	ldi	r23, 0x0B	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  80:	40 e9       	ldi	r20, 0x90	; 144
  82:	51 e0       	ldi	r21, 0x01	; 1
			_delay_ms(300);
			PORTA ^= 1 << PORTA0;
  84:	ab e3       	ldi	r26, 0x3B	; 59
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	11 e0       	ldi	r17, 0x01	; 1
		//} else {
			//PORTA &= ~(1 << PORTA0);
		//}
		
		// Toggle on push
		if (PINA & 1 << PINA1) {
  8a:	80 81       	ld	r24, Z
  8c:	81 ff       	sbrs	r24, 1
  8e:	fd cf       	rjmp	.-6      	; 0x8a <main+0x1e>
  90:	9b 01       	movw	r18, r22
  92:	ca 01       	movw	r24, r20
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <main+0x28>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  9c:	d1 f7       	brne	.-12     	; 0x92 <main+0x26>
			_delay_ms(300);
			PORTA ^= 1 << PORTA0;
  9e:	8c 91       	ld	r24, X
  a0:	81 27       	eor	r24, r17
  a2:	8c 93       	st	X, r24
  a4:	f2 cf       	rjmp	.-28     	; 0x8a <main+0x1e>

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
