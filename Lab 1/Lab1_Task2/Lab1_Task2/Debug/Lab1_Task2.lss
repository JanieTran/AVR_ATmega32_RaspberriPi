
Lab1_Task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000586  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000586  000005fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000030  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000003b  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002c0  00000000  00000000  00000673  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000162  00000000  00000000  00000933  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000029c  00000000  00000000  00000a95  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000d34  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f4  00000000  00000000  00000d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001e4  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	_delay_ms(high);
	PORTA &= ~(1 << PORTA0);
	_delay_ms(low);
}

void freq_100() {
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e8       	ldi	r30, 0x86	; 134
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <main>
  7a:	0c 94 c1 02 	jmp	0x582	; 0x582 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <set_duty_cycle>:
		}
		
    }
}

void set_duty_cycle(int duty) {
  82:	af 92       	push	r10
  84:	bf 92       	push	r11
  86:	cf 92       	push	r12
  88:	df 92       	push	r13
  8a:	ef 92       	push	r14
  8c:	ff 92       	push	r15
  8e:	0f 93       	push	r16
  90:	1f 93       	push	r17
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
	int high = PERIOD * duty / 100;
  96:	28 2f       	mov	r18, r24
  98:	39 2f       	mov	r19, r25
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	22 0f       	add	r18, r18
  a0:	33 1f       	adc	r19, r19
  a2:	c9 01       	movw	r24, r18
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	88 0f       	add	r24, r24
  aa:	99 1f       	adc	r25, r25
  ac:	82 0f       	add	r24, r18
  ae:	93 1f       	adc	r25, r19
  b0:	64 e6       	ldi	r22, 0x64	; 100
  b2:	70 e0       	ldi	r23, 0x00	; 0
  b4:	0e 94 9a 02 	call	0x534	; 0x534 <__divmodhi4>
  b8:	86 2f       	mov	r24, r22
  ba:	97 2f       	mov	r25, r23
  bc:	ec 01       	movw	r28, r24
	int low = PERIOD - high;
	
	PORTA |= 1 << PORTA0;
  be:	eb e3       	ldi	r30, 0x3B	; 59
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	80 83       	st	Z, r24
	_delay_ms(high);
  c8:	be 01       	movw	r22, r28
  ca:	88 27       	eor	r24, r24
  cc:	77 fd       	sbrc	r23, 7
  ce:	80 95       	com	r24
  d0:	98 2f       	mov	r25, r24
  d2:	0e 94 83 01 	call	0x306	; 0x306 <__floatsisf>
  d6:	5b 01       	movw	r10, r22
  d8:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  da:	20 e0       	ldi	r18, 0x00	; 0
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	4a e7       	ldi	r20, 0x7A	; 122
  e0:	55 e4       	ldi	r21, 0x45	; 69
  e2:	0e 94 0f 02 	call	0x41e	; 0x41e <__mulsf3>
  e6:	7b 01       	movw	r14, r22
  e8:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
  ea:	20 e0       	ldi	r18, 0x00	; 0
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	40 e8       	ldi	r20, 0x80	; 128
  f0:	5f e3       	ldi	r21, 0x3F	; 63
  f2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <__cmpsf2>
  f6:	88 23       	and	r24, r24
  f8:	1c f4       	brge	.+6      	; 0x100 <set_duty_cycle+0x7e>
  fa:	61 e0       	ldi	r22, 0x01	; 1
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	23 c0       	rjmp	.+70     	; 0x146 <set_duty_cycle+0xc4>
		__ticks = 1;
	else if (__tmp > 65535)
 100:	c8 01       	movw	r24, r16
 102:	b7 01       	movw	r22, r14
 104:	20 e0       	ldi	r18, 0x00	; 0
 106:	3f ef       	ldi	r19, 0xFF	; 255
 108:	4f e7       	ldi	r20, 0x7F	; 127
 10a:	57 e4       	ldi	r21, 0x47	; 71
 10c:	0e 94 0b 02 	call	0x416	; 0x416 <__gesf2>
 110:	18 16       	cp	r1, r24
 112:	ac f4       	brge	.+42     	; 0x13e <set_duty_cycle+0xbc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 114:	c6 01       	movw	r24, r12
 116:	b5 01       	movw	r22, r10
 118:	20 e0       	ldi	r18, 0x00	; 0
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	40 e2       	ldi	r20, 0x20	; 32
 11e:	51 e4       	ldi	r21, 0x41	; 65
 120:	0e 94 0f 02 	call	0x41e	; 0x41e <__mulsf3>
 124:	0e 94 55 01 	call	0x2aa	; 0x2aa <__fixunssfsi>
 128:	cb 01       	movw	r24, r22
		while(__ticks)
 12a:	67 2b       	or	r22, r23
 12c:	79 f0       	breq	.+30     	; 0x14c <set_duty_cycle+0xca>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 12e:	20 e9       	ldi	r18, 0x90	; 144
 130:	31 e0       	ldi	r19, 0x01	; 1
 132:	f9 01       	movw	r30, r18
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <set_duty_cycle+0xb2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 138:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 13a:	d9 f7       	brne	.-10     	; 0x132 <set_duty_cycle+0xb0>
 13c:	07 c0       	rjmp	.+14     	; 0x14c <set_duty_cycle+0xca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 13e:	c8 01       	movw	r24, r16
 140:	b7 01       	movw	r22, r14
 142:	0e 94 55 01 	call	0x2aa	; 0x2aa <__fixunssfsi>
 146:	cb 01       	movw	r24, r22
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <set_duty_cycle+0xc6>
	PORTA &= ~(1 << PORTA0);
 14c:	eb e3       	ldi	r30, 0x3B	; 59
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	8e 7f       	andi	r24, 0xFE	; 254
 154:	80 83       	st	Z, r24
	_delay_ms(low);
 156:	64 e1       	ldi	r22, 0x14	; 20
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	6c 1b       	sub	r22, r28
 15c:	7d 0b       	sbc	r23, r29
 15e:	88 27       	eor	r24, r24
 160:	77 fd       	sbrc	r23, 7
 162:	80 95       	com	r24
 164:	98 2f       	mov	r25, r24
 166:	0e 94 83 01 	call	0x306	; 0x306 <__floatsisf>
 16a:	5b 01       	movw	r10, r22
 16c:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	4a e7       	ldi	r20, 0x7A	; 122
 174:	55 e4       	ldi	r21, 0x45	; 69
 176:	0e 94 0f 02 	call	0x41e	; 0x41e <__mulsf3>
 17a:	7b 01       	movw	r14, r22
 17c:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	40 e8       	ldi	r20, 0x80	; 128
 184:	5f e3       	ldi	r21, 0x3F	; 63
 186:	0e 94 51 01 	call	0x2a2	; 0x2a2 <__cmpsf2>
 18a:	88 23       	and	r24, r24
 18c:	1c f4       	brge	.+6      	; 0x194 <set_duty_cycle+0x112>
 18e:	61 e0       	ldi	r22, 0x01	; 1
 190:	70 e0       	ldi	r23, 0x00	; 0
 192:	23 c0       	rjmp	.+70     	; 0x1da <set_duty_cycle+0x158>
		__ticks = 1;
	else if (__tmp > 65535)
 194:	c8 01       	movw	r24, r16
 196:	b7 01       	movw	r22, r14
 198:	20 e0       	ldi	r18, 0x00	; 0
 19a:	3f ef       	ldi	r19, 0xFF	; 255
 19c:	4f e7       	ldi	r20, 0x7F	; 127
 19e:	57 e4       	ldi	r21, 0x47	; 71
 1a0:	0e 94 0b 02 	call	0x416	; 0x416 <__gesf2>
 1a4:	18 16       	cp	r1, r24
 1a6:	ac f4       	brge	.+42     	; 0x1d2 <set_duty_cycle+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1a8:	c6 01       	movw	r24, r12
 1aa:	b5 01       	movw	r22, r10
 1ac:	20 e0       	ldi	r18, 0x00	; 0
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	40 e2       	ldi	r20, 0x20	; 32
 1b2:	51 e4       	ldi	r21, 0x41	; 65
 1b4:	0e 94 0f 02 	call	0x41e	; 0x41e <__mulsf3>
 1b8:	0e 94 55 01 	call	0x2aa	; 0x2aa <__fixunssfsi>
 1bc:	cb 01       	movw	r24, r22
		while(__ticks)
 1be:	67 2b       	or	r22, r23
 1c0:	79 f0       	breq	.+30     	; 0x1e0 <set_duty_cycle+0x15e>
 1c2:	20 e9       	ldi	r18, 0x90	; 144
 1c4:	31 e0       	ldi	r19, 0x01	; 1
 1c6:	f9 01       	movw	r30, r18
 1c8:	31 97       	sbiw	r30, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <set_duty_cycle+0x146>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ce:	d9 f7       	brne	.-10     	; 0x1c6 <set_duty_cycle+0x144>
 1d0:	07 c0       	rjmp	.+14     	; 0x1e0 <set_duty_cycle+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1d2:	c8 01       	movw	r24, r16
 1d4:	b7 01       	movw	r22, r14
 1d6:	0e 94 55 01 	call	0x2aa	; 0x2aa <__fixunssfsi>
 1da:	cb 01       	movw	r24, r22
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <set_duty_cycle+0x15a>
}
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	1f 91       	pop	r17
 1e6:	0f 91       	pop	r16
 1e8:	ff 90       	pop	r15
 1ea:	ef 90       	pop	r14
 1ec:	df 90       	pop	r13
 1ee:	cf 90       	pop	r12
 1f0:	bf 90       	pop	r11
 1f2:	af 90       	pop	r10
 1f4:	08 95       	ret

000001f6 <main>:

#define PERIOD 20
//int high, low;

int main(void)
{
 1f6:	3f 92       	push	r3
 1f8:	4f 92       	push	r4
 1fa:	5f 92       	push	r5
 1fc:	6f 92       	push	r6
 1fe:	7f 92       	push	r7
 200:	8f 92       	push	r8
 202:	9f 92       	push	r9
 204:	af 92       	push	r10
 206:	bf 92       	push	r11
 208:	cf 92       	push	r12
 20a:	df 92       	push	r13
 20c:	ef 92       	push	r14
 20e:	ff 92       	push	r15
 210:	0f 93       	push	r16
 212:	1f 93       	push	r17
 214:	df 93       	push	r29
 216:	cf 93       	push	r28
 218:	cd b7       	in	r28, 0x3d	; 61
 21a:	de b7       	in	r29, 0x3e	; 62
 21c:	2e 97       	sbiw	r28, 0x0e	; 14
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	f8 94       	cli
 222:	de bf       	out	0x3e, r29	; 62
 224:	0f be       	out	0x3f, r0	; 63
 226:	cd bf       	out	0x3d, r28	; 61
	// PA0 as output
	DDRA |= 1 << DDA0;
 228:	ea e3       	ldi	r30, 0x3A	; 58
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	81 60       	ori	r24, 0x01	; 1
 230:	80 83       	st	Z, r24
    while (1) 
    {
		//freq_100();
		int cycle[7] = {10, 20, 30, 40, 50, 75, 100};
 232:	3e 01       	movw	r6, r28
 234:	08 94       	sec
 236:	61 1c       	adc	r6, r1
 238:	71 1c       	adc	r7, r1
 23a:	0f 2e       	mov	r0, r31
 23c:	f0 e6       	ldi	r31, 0x60	; 96
 23e:	4f 2e       	mov	r4, r31
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	5f 2e       	mov	r5, r31
 244:	f0 2d       	mov	r31, r0
 246:	0f 2e       	mov	r0, r31
 248:	fe e0       	ldi	r31, 0x0E	; 14
 24a:	3f 2e       	mov	r3, r31
 24c:	f0 2d       	mov	r31, r0
		
		for (int i = 0; i < 7; i++) {
 24e:	0f 2e       	mov	r0, r31
 250:	ff e0       	ldi	r31, 0x0F	; 15
 252:	af 2e       	mov	r10, r31
 254:	bb 24       	eor	r11, r11
 256:	f0 2d       	mov	r31, r0
 258:	ac 0e       	add	r10, r28
 25a:	bd 1e       	adc	r11, r29
			for (int j = 0; j < 100; j++) {
				set_duty_cycle(cycle[i]);
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	98 2e       	mov	r9, r24
 262:	89 2e       	mov	r8, r25
	// PA0 as output
	DDRA |= 1 << DDA0;
    while (1) 
    {
		//freq_100();
		int cycle[7] = {10, 20, 30, 40, 50, 75, 100};
 264:	d3 01       	movw	r26, r6
 266:	f2 01       	movw	r30, r4
 268:	83 2d       	mov	r24, r3
 26a:	01 90       	ld	r0, Z+
 26c:	0d 92       	st	X+, r0
 26e:	81 50       	subi	r24, 0x01	; 1
 270:	e1 f7       	brne	.-8      	; 0x26a <main+0x74>
 272:	63 01       	movw	r12, r6
 274:	0f c0       	rjmp	.+30     	; 0x294 <main+0x9e>
		
		for (int i = 0; i < 7; i++) {
			for (int j = 0; j < 100; j++) {
				set_duty_cycle(cycle[i]);
 276:	c7 01       	movw	r24, r14
 278:	0e 94 41 00 	call	0x82	; 0x82 <set_duty_cycle>
    {
		//freq_100();
		int cycle[7] = {10, 20, 30, 40, 50, 75, 100};
		
		for (int i = 0; i < 7; i++) {
			for (int j = 0; j < 100; j++) {
 27c:	0f 5f       	subi	r16, 0xFF	; 255
 27e:	1f 4f       	sbci	r17, 0xFF	; 255
 280:	04 36       	cpi	r16, 0x64	; 100
 282:	11 05       	cpc	r17, r1
 284:	c1 f7       	brne	.-16     	; 0x276 <main+0x80>
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	c8 0e       	add	r12, r24
 28c:	d9 1e       	adc	r13, r25
    while (1) 
    {
		//freq_100();
		int cycle[7] = {10, 20, 30, 40, 50, 75, 100};
		
		for (int i = 0; i < 7; i++) {
 28e:	ca 14       	cp	r12, r10
 290:	db 04       	cpc	r13, r11
 292:	41 f3       	breq	.-48     	; 0x264 <main+0x6e>
			for (int j = 0; j < 100; j++) {
				set_duty_cycle(cycle[i]);
 294:	f6 01       	movw	r30, r12
 296:	e0 80       	ld	r14, Z
 298:	f1 80       	ldd	r15, Z+1	; 0x01
 29a:	89 2d       	mov	r24, r9
 29c:	98 2d       	mov	r25, r8
 29e:	8c 01       	movw	r16, r24
 2a0:	ea cf       	rjmp	.-44     	; 0x276 <main+0x80>

000002a2 <__cmpsf2>:
 2a2:	6c d0       	rcall	.+216    	; 0x37c <__fp_cmp>
 2a4:	08 f4       	brcc	.+2      	; 0x2a8 <__cmpsf2+0x6>
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	08 95       	ret

000002aa <__fixunssfsi>:
 2aa:	94 d0       	rcall	.+296    	; 0x3d4 <__fp_splitA>
 2ac:	88 f0       	brcs	.+34     	; 0x2d0 <__fixunssfsi+0x26>
 2ae:	9f 57       	subi	r25, 0x7F	; 127
 2b0:	90 f0       	brcs	.+36     	; 0x2d6 <__fixunssfsi+0x2c>
 2b2:	b9 2f       	mov	r27, r25
 2b4:	99 27       	eor	r25, r25
 2b6:	b7 51       	subi	r27, 0x17	; 23
 2b8:	a0 f0       	brcs	.+40     	; 0x2e2 <__fixunssfsi+0x38>
 2ba:	d1 f0       	breq	.+52     	; 0x2f0 <__fixunssfsi+0x46>
 2bc:	66 0f       	add	r22, r22
 2be:	77 1f       	adc	r23, r23
 2c0:	88 1f       	adc	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	1a f0       	brmi	.+6      	; 0x2cc <__fixunssfsi+0x22>
 2c6:	ba 95       	dec	r27
 2c8:	c9 f7       	brne	.-14     	; 0x2bc <__fixunssfsi+0x12>
 2ca:	12 c0       	rjmp	.+36     	; 0x2f0 <__fixunssfsi+0x46>
 2cc:	b1 30       	cpi	r27, 0x01	; 1
 2ce:	81 f0       	breq	.+32     	; 0x2f0 <__fixunssfsi+0x46>
 2d0:	9b d0       	rcall	.+310    	; 0x408 <__fp_zero>
 2d2:	b1 e0       	ldi	r27, 0x01	; 1
 2d4:	08 95       	ret
 2d6:	98 c0       	rjmp	.+304    	; 0x408 <__fp_zero>
 2d8:	67 2f       	mov	r22, r23
 2da:	78 2f       	mov	r23, r24
 2dc:	88 27       	eor	r24, r24
 2de:	b8 5f       	subi	r27, 0xF8	; 248
 2e0:	39 f0       	breq	.+14     	; 0x2f0 <__fixunssfsi+0x46>
 2e2:	b9 3f       	cpi	r27, 0xF9	; 249
 2e4:	cc f3       	brlt	.-14     	; 0x2d8 <__fixunssfsi+0x2e>
 2e6:	86 95       	lsr	r24
 2e8:	77 95       	ror	r23
 2ea:	67 95       	ror	r22
 2ec:	b3 95       	inc	r27
 2ee:	d9 f7       	brne	.-10     	; 0x2e6 <__fixunssfsi+0x3c>
 2f0:	3e f4       	brtc	.+14     	; 0x300 <__fixunssfsi+0x56>
 2f2:	90 95       	com	r25
 2f4:	80 95       	com	r24
 2f6:	70 95       	com	r23
 2f8:	61 95       	neg	r22
 2fa:	7f 4f       	sbci	r23, 0xFF	; 255
 2fc:	8f 4f       	sbci	r24, 0xFF	; 255
 2fe:	9f 4f       	sbci	r25, 0xFF	; 255
 300:	08 95       	ret

00000302 <__floatunsisf>:
 302:	e8 94       	clt
 304:	09 c0       	rjmp	.+18     	; 0x318 <__floatsisf+0x12>

00000306 <__floatsisf>:
 306:	97 fb       	bst	r25, 7
 308:	3e f4       	brtc	.+14     	; 0x318 <__floatsisf+0x12>
 30a:	90 95       	com	r25
 30c:	80 95       	com	r24
 30e:	70 95       	com	r23
 310:	61 95       	neg	r22
 312:	7f 4f       	sbci	r23, 0xFF	; 255
 314:	8f 4f       	sbci	r24, 0xFF	; 255
 316:	9f 4f       	sbci	r25, 0xFF	; 255
 318:	99 23       	and	r25, r25
 31a:	a9 f0       	breq	.+42     	; 0x346 <__floatsisf+0x40>
 31c:	f9 2f       	mov	r31, r25
 31e:	96 e9       	ldi	r25, 0x96	; 150
 320:	bb 27       	eor	r27, r27
 322:	93 95       	inc	r25
 324:	f6 95       	lsr	r31
 326:	87 95       	ror	r24
 328:	77 95       	ror	r23
 32a:	67 95       	ror	r22
 32c:	b7 95       	ror	r27
 32e:	f1 11       	cpse	r31, r1
 330:	f8 cf       	rjmp	.-16     	; 0x322 <__floatsisf+0x1c>
 332:	fa f4       	brpl	.+62     	; 0x372 <__floatsisf+0x6c>
 334:	bb 0f       	add	r27, r27
 336:	11 f4       	brne	.+4      	; 0x33c <__floatsisf+0x36>
 338:	60 ff       	sbrs	r22, 0
 33a:	1b c0       	rjmp	.+54     	; 0x372 <__floatsisf+0x6c>
 33c:	6f 5f       	subi	r22, 0xFF	; 255
 33e:	7f 4f       	sbci	r23, 0xFF	; 255
 340:	8f 4f       	sbci	r24, 0xFF	; 255
 342:	9f 4f       	sbci	r25, 0xFF	; 255
 344:	16 c0       	rjmp	.+44     	; 0x372 <__floatsisf+0x6c>
 346:	88 23       	and	r24, r24
 348:	11 f0       	breq	.+4      	; 0x34e <__floatsisf+0x48>
 34a:	96 e9       	ldi	r25, 0x96	; 150
 34c:	11 c0       	rjmp	.+34     	; 0x370 <__floatsisf+0x6a>
 34e:	77 23       	and	r23, r23
 350:	21 f0       	breq	.+8      	; 0x35a <__floatsisf+0x54>
 352:	9e e8       	ldi	r25, 0x8E	; 142
 354:	87 2f       	mov	r24, r23
 356:	76 2f       	mov	r23, r22
 358:	05 c0       	rjmp	.+10     	; 0x364 <__floatsisf+0x5e>
 35a:	66 23       	and	r22, r22
 35c:	71 f0       	breq	.+28     	; 0x37a <__floatsisf+0x74>
 35e:	96 e8       	ldi	r25, 0x86	; 134
 360:	86 2f       	mov	r24, r22
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	2a f0       	brmi	.+10     	; 0x372 <__floatsisf+0x6c>
 368:	9a 95       	dec	r25
 36a:	66 0f       	add	r22, r22
 36c:	77 1f       	adc	r23, r23
 36e:	88 1f       	adc	r24, r24
 370:	da f7       	brpl	.-10     	; 0x368 <__floatsisf+0x62>
 372:	88 0f       	add	r24, r24
 374:	96 95       	lsr	r25
 376:	87 95       	ror	r24
 378:	97 f9       	bld	r25, 7
 37a:	08 95       	ret

0000037c <__fp_cmp>:
 37c:	99 0f       	add	r25, r25
 37e:	00 08       	sbc	r0, r0
 380:	55 0f       	add	r21, r21
 382:	aa 0b       	sbc	r26, r26
 384:	e0 e8       	ldi	r30, 0x80	; 128
 386:	fe ef       	ldi	r31, 0xFE	; 254
 388:	16 16       	cp	r1, r22
 38a:	17 06       	cpc	r1, r23
 38c:	e8 07       	cpc	r30, r24
 38e:	f9 07       	cpc	r31, r25
 390:	c0 f0       	brcs	.+48     	; 0x3c2 <__fp_cmp+0x46>
 392:	12 16       	cp	r1, r18
 394:	13 06       	cpc	r1, r19
 396:	e4 07       	cpc	r30, r20
 398:	f5 07       	cpc	r31, r21
 39a:	98 f0       	brcs	.+38     	; 0x3c2 <__fp_cmp+0x46>
 39c:	62 1b       	sub	r22, r18
 39e:	73 0b       	sbc	r23, r19
 3a0:	84 0b       	sbc	r24, r20
 3a2:	95 0b       	sbc	r25, r21
 3a4:	39 f4       	brne	.+14     	; 0x3b4 <__fp_cmp+0x38>
 3a6:	0a 26       	eor	r0, r26
 3a8:	61 f0       	breq	.+24     	; 0x3c2 <__fp_cmp+0x46>
 3aa:	23 2b       	or	r18, r19
 3ac:	24 2b       	or	r18, r20
 3ae:	25 2b       	or	r18, r21
 3b0:	21 f4       	brne	.+8      	; 0x3ba <__fp_cmp+0x3e>
 3b2:	08 95       	ret
 3b4:	0a 26       	eor	r0, r26
 3b6:	09 f4       	brne	.+2      	; 0x3ba <__fp_cmp+0x3e>
 3b8:	a1 40       	sbci	r26, 0x01	; 1
 3ba:	a6 95       	lsr	r26
 3bc:	8f ef       	ldi	r24, 0xFF	; 255
 3be:	81 1d       	adc	r24, r1
 3c0:	81 1d       	adc	r24, r1
 3c2:	08 95       	ret

000003c4 <__fp_split3>:
 3c4:	57 fd       	sbrc	r21, 7
 3c6:	90 58       	subi	r25, 0x80	; 128
 3c8:	44 0f       	add	r20, r20
 3ca:	55 1f       	adc	r21, r21
 3cc:	59 f0       	breq	.+22     	; 0x3e4 <__fp_splitA+0x10>
 3ce:	5f 3f       	cpi	r21, 0xFF	; 255
 3d0:	71 f0       	breq	.+28     	; 0x3ee <__fp_splitA+0x1a>
 3d2:	47 95       	ror	r20

000003d4 <__fp_splitA>:
 3d4:	88 0f       	add	r24, r24
 3d6:	97 fb       	bst	r25, 7
 3d8:	99 1f       	adc	r25, r25
 3da:	61 f0       	breq	.+24     	; 0x3f4 <__fp_splitA+0x20>
 3dc:	9f 3f       	cpi	r25, 0xFF	; 255
 3de:	79 f0       	breq	.+30     	; 0x3fe <__fp_splitA+0x2a>
 3e0:	87 95       	ror	r24
 3e2:	08 95       	ret
 3e4:	12 16       	cp	r1, r18
 3e6:	13 06       	cpc	r1, r19
 3e8:	14 06       	cpc	r1, r20
 3ea:	55 1f       	adc	r21, r21
 3ec:	f2 cf       	rjmp	.-28     	; 0x3d2 <__fp_split3+0xe>
 3ee:	46 95       	lsr	r20
 3f0:	f1 df       	rcall	.-30     	; 0x3d4 <__fp_splitA>
 3f2:	08 c0       	rjmp	.+16     	; 0x404 <__fp_splitA+0x30>
 3f4:	16 16       	cp	r1, r22
 3f6:	17 06       	cpc	r1, r23
 3f8:	18 06       	cpc	r1, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	f1 cf       	rjmp	.-30     	; 0x3e0 <__fp_splitA+0xc>
 3fe:	86 95       	lsr	r24
 400:	71 05       	cpc	r23, r1
 402:	61 05       	cpc	r22, r1
 404:	08 94       	sec
 406:	08 95       	ret

00000408 <__fp_zero>:
 408:	e8 94       	clt

0000040a <__fp_szero>:
 40a:	bb 27       	eor	r27, r27
 40c:	66 27       	eor	r22, r22
 40e:	77 27       	eor	r23, r23
 410:	cb 01       	movw	r24, r22
 412:	97 f9       	bld	r25, 7
 414:	08 95       	ret

00000416 <__gesf2>:
 416:	b2 df       	rcall	.-156    	; 0x37c <__fp_cmp>
 418:	08 f4       	brcc	.+2      	; 0x41c <__gesf2+0x6>
 41a:	8f ef       	ldi	r24, 0xFF	; 255
 41c:	08 95       	ret

0000041e <__mulsf3>:
 41e:	0b d0       	rcall	.+22     	; 0x436 <__mulsf3x>
 420:	78 c0       	rjmp	.+240    	; 0x512 <__fp_round>
 422:	69 d0       	rcall	.+210    	; 0x4f6 <__fp_pscA>
 424:	28 f0       	brcs	.+10     	; 0x430 <__mulsf3+0x12>
 426:	6e d0       	rcall	.+220    	; 0x504 <__fp_pscB>
 428:	18 f0       	brcs	.+6      	; 0x430 <__mulsf3+0x12>
 42a:	95 23       	and	r25, r21
 42c:	09 f0       	breq	.+2      	; 0x430 <__mulsf3+0x12>
 42e:	5a c0       	rjmp	.+180    	; 0x4e4 <__fp_inf>
 430:	5f c0       	rjmp	.+190    	; 0x4f0 <__fp_nan>
 432:	11 24       	eor	r1, r1
 434:	ea cf       	rjmp	.-44     	; 0x40a <__fp_szero>

00000436 <__mulsf3x>:
 436:	c6 df       	rcall	.-116    	; 0x3c4 <__fp_split3>
 438:	a0 f3       	brcs	.-24     	; 0x422 <__mulsf3+0x4>

0000043a <__mulsf3_pse>:
 43a:	95 9f       	mul	r25, r21
 43c:	d1 f3       	breq	.-12     	; 0x432 <__mulsf3+0x14>
 43e:	95 0f       	add	r25, r21
 440:	50 e0       	ldi	r21, 0x00	; 0
 442:	55 1f       	adc	r21, r21
 444:	62 9f       	mul	r22, r18
 446:	f0 01       	movw	r30, r0
 448:	72 9f       	mul	r23, r18
 44a:	bb 27       	eor	r27, r27
 44c:	f0 0d       	add	r31, r0
 44e:	b1 1d       	adc	r27, r1
 450:	63 9f       	mul	r22, r19
 452:	aa 27       	eor	r26, r26
 454:	f0 0d       	add	r31, r0
 456:	b1 1d       	adc	r27, r1
 458:	aa 1f       	adc	r26, r26
 45a:	64 9f       	mul	r22, r20
 45c:	66 27       	eor	r22, r22
 45e:	b0 0d       	add	r27, r0
 460:	a1 1d       	adc	r26, r1
 462:	66 1f       	adc	r22, r22
 464:	82 9f       	mul	r24, r18
 466:	22 27       	eor	r18, r18
 468:	b0 0d       	add	r27, r0
 46a:	a1 1d       	adc	r26, r1
 46c:	62 1f       	adc	r22, r18
 46e:	73 9f       	mul	r23, r19
 470:	b0 0d       	add	r27, r0
 472:	a1 1d       	adc	r26, r1
 474:	62 1f       	adc	r22, r18
 476:	83 9f       	mul	r24, r19
 478:	a0 0d       	add	r26, r0
 47a:	61 1d       	adc	r22, r1
 47c:	22 1f       	adc	r18, r18
 47e:	74 9f       	mul	r23, r20
 480:	33 27       	eor	r19, r19
 482:	a0 0d       	add	r26, r0
 484:	61 1d       	adc	r22, r1
 486:	23 1f       	adc	r18, r19
 488:	84 9f       	mul	r24, r20
 48a:	60 0d       	add	r22, r0
 48c:	21 1d       	adc	r18, r1
 48e:	82 2f       	mov	r24, r18
 490:	76 2f       	mov	r23, r22
 492:	6a 2f       	mov	r22, r26
 494:	11 24       	eor	r1, r1
 496:	9f 57       	subi	r25, 0x7F	; 127
 498:	50 40       	sbci	r21, 0x00	; 0
 49a:	8a f0       	brmi	.+34     	; 0x4be <__mulsf3_pse+0x84>
 49c:	e1 f0       	breq	.+56     	; 0x4d6 <__mulsf3_pse+0x9c>
 49e:	88 23       	and	r24, r24
 4a0:	4a f0       	brmi	.+18     	; 0x4b4 <__mulsf3_pse+0x7a>
 4a2:	ee 0f       	add	r30, r30
 4a4:	ff 1f       	adc	r31, r31
 4a6:	bb 1f       	adc	r27, r27
 4a8:	66 1f       	adc	r22, r22
 4aa:	77 1f       	adc	r23, r23
 4ac:	88 1f       	adc	r24, r24
 4ae:	91 50       	subi	r25, 0x01	; 1
 4b0:	50 40       	sbci	r21, 0x00	; 0
 4b2:	a9 f7       	brne	.-22     	; 0x49e <__mulsf3_pse+0x64>
 4b4:	9e 3f       	cpi	r25, 0xFE	; 254
 4b6:	51 05       	cpc	r21, r1
 4b8:	70 f0       	brcs	.+28     	; 0x4d6 <__mulsf3_pse+0x9c>
 4ba:	14 c0       	rjmp	.+40     	; 0x4e4 <__fp_inf>
 4bc:	a6 cf       	rjmp	.-180    	; 0x40a <__fp_szero>
 4be:	5f 3f       	cpi	r21, 0xFF	; 255
 4c0:	ec f3       	brlt	.-6      	; 0x4bc <__mulsf3_pse+0x82>
 4c2:	98 3e       	cpi	r25, 0xE8	; 232
 4c4:	dc f3       	brlt	.-10     	; 0x4bc <__mulsf3_pse+0x82>
 4c6:	86 95       	lsr	r24
 4c8:	77 95       	ror	r23
 4ca:	67 95       	ror	r22
 4cc:	b7 95       	ror	r27
 4ce:	f7 95       	ror	r31
 4d0:	e7 95       	ror	r30
 4d2:	9f 5f       	subi	r25, 0xFF	; 255
 4d4:	c1 f7       	brne	.-16     	; 0x4c6 <__mulsf3_pse+0x8c>
 4d6:	fe 2b       	or	r31, r30
 4d8:	88 0f       	add	r24, r24
 4da:	91 1d       	adc	r25, r1
 4dc:	96 95       	lsr	r25
 4de:	87 95       	ror	r24
 4e0:	97 f9       	bld	r25, 7
 4e2:	08 95       	ret

000004e4 <__fp_inf>:
 4e4:	97 f9       	bld	r25, 7
 4e6:	9f 67       	ori	r25, 0x7F	; 127
 4e8:	80 e8       	ldi	r24, 0x80	; 128
 4ea:	70 e0       	ldi	r23, 0x00	; 0
 4ec:	60 e0       	ldi	r22, 0x00	; 0
 4ee:	08 95       	ret

000004f0 <__fp_nan>:
 4f0:	9f ef       	ldi	r25, 0xFF	; 255
 4f2:	80 ec       	ldi	r24, 0xC0	; 192
 4f4:	08 95       	ret

000004f6 <__fp_pscA>:
 4f6:	00 24       	eor	r0, r0
 4f8:	0a 94       	dec	r0
 4fa:	16 16       	cp	r1, r22
 4fc:	17 06       	cpc	r1, r23
 4fe:	18 06       	cpc	r1, r24
 500:	09 06       	cpc	r0, r25
 502:	08 95       	ret

00000504 <__fp_pscB>:
 504:	00 24       	eor	r0, r0
 506:	0a 94       	dec	r0
 508:	12 16       	cp	r1, r18
 50a:	13 06       	cpc	r1, r19
 50c:	14 06       	cpc	r1, r20
 50e:	05 06       	cpc	r0, r21
 510:	08 95       	ret

00000512 <__fp_round>:
 512:	09 2e       	mov	r0, r25
 514:	03 94       	inc	r0
 516:	00 0c       	add	r0, r0
 518:	11 f4       	brne	.+4      	; 0x51e <__fp_round+0xc>
 51a:	88 23       	and	r24, r24
 51c:	52 f0       	brmi	.+20     	; 0x532 <__fp_round+0x20>
 51e:	bb 0f       	add	r27, r27
 520:	40 f4       	brcc	.+16     	; 0x532 <__fp_round+0x20>
 522:	bf 2b       	or	r27, r31
 524:	11 f4       	brne	.+4      	; 0x52a <__fp_round+0x18>
 526:	60 ff       	sbrs	r22, 0
 528:	04 c0       	rjmp	.+8      	; 0x532 <__fp_round+0x20>
 52a:	6f 5f       	subi	r22, 0xFF	; 255
 52c:	7f 4f       	sbci	r23, 0xFF	; 255
 52e:	8f 4f       	sbci	r24, 0xFF	; 255
 530:	9f 4f       	sbci	r25, 0xFF	; 255
 532:	08 95       	ret

00000534 <__divmodhi4>:
 534:	97 fb       	bst	r25, 7
 536:	09 2e       	mov	r0, r25
 538:	07 26       	eor	r0, r23
 53a:	0a d0       	rcall	.+20     	; 0x550 <__divmodhi4_neg1>
 53c:	77 fd       	sbrc	r23, 7
 53e:	04 d0       	rcall	.+8      	; 0x548 <__divmodhi4_neg2>
 540:	0c d0       	rcall	.+24     	; 0x55a <__udivmodhi4>
 542:	06 d0       	rcall	.+12     	; 0x550 <__divmodhi4_neg1>
 544:	00 20       	and	r0, r0
 546:	1a f4       	brpl	.+6      	; 0x54e <__divmodhi4_exit>

00000548 <__divmodhi4_neg2>:
 548:	70 95       	com	r23
 54a:	61 95       	neg	r22
 54c:	7f 4f       	sbci	r23, 0xFF	; 255

0000054e <__divmodhi4_exit>:
 54e:	08 95       	ret

00000550 <__divmodhi4_neg1>:
 550:	f6 f7       	brtc	.-4      	; 0x54e <__divmodhi4_exit>
 552:	90 95       	com	r25
 554:	81 95       	neg	r24
 556:	9f 4f       	sbci	r25, 0xFF	; 255
 558:	08 95       	ret

0000055a <__udivmodhi4>:
 55a:	aa 1b       	sub	r26, r26
 55c:	bb 1b       	sub	r27, r27
 55e:	51 e1       	ldi	r21, 0x11	; 17
 560:	07 c0       	rjmp	.+14     	; 0x570 <__udivmodhi4_ep>

00000562 <__udivmodhi4_loop>:
 562:	aa 1f       	adc	r26, r26
 564:	bb 1f       	adc	r27, r27
 566:	a6 17       	cp	r26, r22
 568:	b7 07       	cpc	r27, r23
 56a:	10 f0       	brcs	.+4      	; 0x570 <__udivmodhi4_ep>
 56c:	a6 1b       	sub	r26, r22
 56e:	b7 0b       	sbc	r27, r23

00000570 <__udivmodhi4_ep>:
 570:	88 1f       	adc	r24, r24
 572:	99 1f       	adc	r25, r25
 574:	5a 95       	dec	r21
 576:	a9 f7       	brne	.-22     	; 0x562 <__udivmodhi4_loop>
 578:	80 95       	com	r24
 57a:	90 95       	com	r25
 57c:	bc 01       	movw	r22, r24
 57e:	cd 01       	movw	r24, r26
 580:	08 95       	ret

00000582 <_exit>:
 582:	f8 94       	cli

00000584 <__stop_program>:
 584:	ff cf       	rjmp	.-2      	; 0x584 <__stop_program>
