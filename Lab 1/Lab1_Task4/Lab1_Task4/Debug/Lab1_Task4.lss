
Lab1_Task4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000028  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002d  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000c9  00000000  00000000  000001b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000007c  00000000  00000000  0000027a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000a9  00000000  00000000  000002f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000b4  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000018  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000020  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 43 00 	call	0x86	; 0x86 <main>
  64:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <calculate_ocr>:
    {
		OCR0 = calculate_ocr(duty_cycles[0]);
    }
}

int calculate_ocr(int duty_cycle) {
  6c:	38 2f       	mov	r19, r24
  6e:	22 27       	eor	r18, r18
  70:	a9 01       	movw	r20, r18
  72:	48 1b       	sub	r20, r24
  74:	59 0b       	sbc	r21, r25
  76:	ca 01       	movw	r24, r20
  78:	64 e6       	ldi	r22, 0x64	; 100
  7a:	70 e0       	ldi	r23, 0x00	; 0
  7c:	0e 94 5b 00 	call	0xb6	; 0xb6 <__divmodhi4>
  80:	86 2f       	mov	r24, r22
  82:	97 2f       	mov	r25, r23
	return duty_cycle * 255 / 100;
}
  84:	08 95       	ret

00000086 <main>:
#include <avr/io.h>

int main(void)
{
    // PB3 as output for LED
	DDRB |= 1 << DDB3;
  86:	e7 e3       	ldi	r30, 0x37	; 55
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	88 60       	ori	r24, 0x08	; 8
  8e:	80 83       	st	Z, r24
	
	// TIMER0 INIT
	// Set Fast PWM mode
	TCCR0 |= (1 << WGM00) | (1 << WGM01);
  90:	e3 e5       	ldi	r30, 0x53	; 83
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	88 64       	ori	r24, 0x48	; 72
  98:	80 83       	st	Z, r24
	// Clear OC0 on Compare Match, set OC0 at BOTTOM
	TCCR0 |= 1 << COM01;
  9a:	80 81       	ld	r24, Z
  9c:	80 62       	ori	r24, 0x20	; 32
  9e:	80 83       	st	Z, r24
	// Clk source = clk/1024 => 12MHz/1024 = 11718Hz = 85us/cycle
	// Counting from 0-255 => 85us * 255 = 21675us = 21.675ms = 46Hz
	TCCR0 |= (1 << CS00) | (1 << CS02);
  a0:	80 81       	ld	r24, Z
  a2:	85 60       	ori	r24, 0x05	; 5
  a4:	80 83       	st	Z, r24
	// Output compare values required
	int duty_cycles[] = {10, 20, 30, 40, 50, 75, 100};
	
    while (1) 
    {
		OCR0 = calculate_ocr(duty_cycles[0]);
  a6:	8a e0       	ldi	r24, 0x0A	; 10
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 36 00 	call	0x6c	; 0x6c <calculate_ocr>
  ae:	ec e5       	ldi	r30, 0x5C	; 92
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 83       	st	Z, r24
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <main+0x2c>

000000b6 <__divmodhi4>:
  b6:	97 fb       	bst	r25, 7
  b8:	09 2e       	mov	r0, r25
  ba:	07 26       	eor	r0, r23
  bc:	0a d0       	rcall	.+20     	; 0xd2 <__divmodhi4_neg1>
  be:	77 fd       	sbrc	r23, 7
  c0:	04 d0       	rcall	.+8      	; 0xca <__divmodhi4_neg2>
  c2:	0c d0       	rcall	.+24     	; 0xdc <__udivmodhi4>
  c4:	06 d0       	rcall	.+12     	; 0xd2 <__divmodhi4_neg1>
  c6:	00 20       	and	r0, r0
  c8:	1a f4       	brpl	.+6      	; 0xd0 <__divmodhi4_exit>

000000ca <__divmodhi4_neg2>:
  ca:	70 95       	com	r23
  cc:	61 95       	neg	r22
  ce:	7f 4f       	sbci	r23, 0xFF	; 255

000000d0 <__divmodhi4_exit>:
  d0:	08 95       	ret

000000d2 <__divmodhi4_neg1>:
  d2:	f6 f7       	brtc	.-4      	; 0xd0 <__divmodhi4_exit>
  d4:	90 95       	com	r25
  d6:	81 95       	neg	r24
  d8:	9f 4f       	sbci	r25, 0xFF	; 255
  da:	08 95       	ret

000000dc <__udivmodhi4>:
  dc:	aa 1b       	sub	r26, r26
  de:	bb 1b       	sub	r27, r27
  e0:	51 e1       	ldi	r21, 0x11	; 17
  e2:	07 c0       	rjmp	.+14     	; 0xf2 <__udivmodhi4_ep>

000000e4 <__udivmodhi4_loop>:
  e4:	aa 1f       	adc	r26, r26
  e6:	bb 1f       	adc	r27, r27
  e8:	a6 17       	cp	r26, r22
  ea:	b7 07       	cpc	r27, r23
  ec:	10 f0       	brcs	.+4      	; 0xf2 <__udivmodhi4_ep>
  ee:	a6 1b       	sub	r26, r22
  f0:	b7 0b       	sbc	r27, r23

000000f2 <__udivmodhi4_ep>:
  f2:	88 1f       	adc	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	5a 95       	dec	r21
  f8:	a9 f7       	brne	.-22     	; 0xe4 <__udivmodhi4_loop>
  fa:	80 95       	com	r24
  fc:	90 95       	com	r25
  fe:	bc 01       	movw	r22, r24
 100:	cd 01       	movw	r24, r26
 102:	08 95       	ret

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
