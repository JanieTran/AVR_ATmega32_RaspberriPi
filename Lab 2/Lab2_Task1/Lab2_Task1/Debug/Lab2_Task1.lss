
Lab2_Task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000106  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000038  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000052  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000eb  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000009e  00000000  00000000  000002cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000174  00000000  00000000  0000036d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  000004e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c6  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000013  00000000  00000000  000005fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000030  00000000  00000000  0000060d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6f 00 	call	0xde	; 0xde <main>
  74:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Timer0_Init>:
// Timer0
//---------------------------------

void Timer0_Init() {
	// Set Fast PWM mode
	TCCR0 |= (1 << WGM00) | (1 << WGM01);
  7c:	e3 e5       	ldi	r30, 0x53	; 83
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	80 81       	ld	r24, Z
  82:	88 64       	ori	r24, 0x48	; 72
  84:	80 83       	st	Z, r24
	// Clear OC0 on Compare Match, set OC0 at BOTTOM
	TCCR0 |= 1 << COM01;
  86:	80 81       	ld	r24, Z
  88:	80 62       	ori	r24, 0x20	; 32
  8a:	80 83       	st	Z, r24
	// Clk source = clk/1024 => 12MHz/1024 = 11718Hz = 85us/cycle
	// Counting from 0-255 => 85us * 255 = 21675us = 21.675ms = 46Hz
	TCCR0 |= (1 << CS00) | (1 << CS02);
  8c:	80 81       	ld	r24, Z
  8e:	85 60       	ori	r24, 0x05	; 5
  90:	80 83       	st	Z, r24
}
  92:	08 95       	ret

00000094 <ADC_Init>:
// ADC
//---------------------------------

void ADC_Init() {
	// AREF, Internal Vref turned off
	ADMUX &= ~(0b11 << REFS0);
  94:	e7 e2       	ldi	r30, 0x27	; 39
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	8f 73       	andi	r24, 0x3F	; 63
  9c:	80 83       	st	Z, r24
	// Left Adjust Result
	ADMUX |= 1 << ADLAR;
  9e:	80 81       	ld	r24, Z
  a0:	80 62       	ori	r24, 0x20	; 32
  a2:	80 83       	st	Z, r24
	
	// ADC Enable
	ADCSRA |= 1 << ADEN;
  a4:	e6 e2       	ldi	r30, 0x26	; 38
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	80 68       	ori	r24, 0x80	; 128
  ac:	80 83       	st	Z, r24
	// ADC Prescaler = 128
	ADCSRA |= 0b111 << ADPS0;
  ae:	80 81       	ld	r24, Z
  b0:	87 60       	ori	r24, 0x07	; 7
  b2:	80 83       	st	Z, r24
}
  b4:	08 95       	ret

000000b6 <ADC_Read>:

uint8_t ADC_Read(uint8_t channel) {
	// Select ADC channel
	ADMUX |= channel << MUX0;
  b6:	e7 e2       	ldi	r30, 0x27	; 39
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	90 81       	ld	r25, Z
  bc:	89 2b       	or	r24, r25
  be:	80 83       	st	Z, r24
	
	// Start single conversion
	ADCSRA |= 1 << ADSC;
  c0:	e6 e2       	ldi	r30, 0x26	; 38
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	80 83       	st	Z, r24
	// Wait until conversion complete
	while (!(ADCSRA & 1 << ADIF));
  ca:	80 81       	ld	r24, Z
  cc:	84 ff       	sbrs	r24, 4
  ce:	fd cf       	rjmp	.-6      	; 0xca <ADC_Read+0x14>
	
	// Clear ADIF
	ADCSRA |= 1 <<  ADIF;
  d0:	e6 e2       	ldi	r30, 0x26	; 38
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 61       	ori	r24, 0x10	; 16
  d8:	80 83       	st	Z, r24
	
	return ADCH;
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	08 95       	ret

000000de <main>:
//================================================================

uint8_t valueADC;

int main(void)
{
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
	// PB3 as output for LED
	DDRB |= 1 << DDB3;
  e2:	e7 e3       	ldi	r30, 0x37	; 55
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	88 60       	ori	r24, 0x08	; 8
  ea:	80 83       	st	Z, r24
	
	// Register configuration
	Timer0_Init();
  ec:	0e 94 3e 00 	call	0x7c	; 0x7c <Timer0_Init>
	ADC_Init();
  f0:	0e 94 4a 00 	call	0x94	; 0x94 <ADC_Init>
	
    while (1) 
    {
		OCR0 = ADC_Read(ADC5_POT);
  f4:	cc e5       	ldi	r28, 0x5C	; 92
  f6:	d0 e0       	ldi	r29, 0x00	; 0
  f8:	85 e0       	ldi	r24, 0x05	; 5
  fa:	0e 94 5b 00 	call	0xb6	; 0xb6 <ADC_Read>
  fe:	88 83       	st	Y, r24
 100:	fb cf       	rjmp	.-10     	; 0xf8 <main+0x1a>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
