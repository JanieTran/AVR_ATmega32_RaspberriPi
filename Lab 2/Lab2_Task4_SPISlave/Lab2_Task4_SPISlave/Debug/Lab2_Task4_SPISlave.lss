
Lab2_Task4_SPISlave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000148  2**0
                  ALLOC
  2 .debug_aranges 00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000054  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000d4  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000087  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000142  00000000  00000000  00000327  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  0000046c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000cf  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  0000057b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <SPI_SlaveInit>:
    }
}

void SPI_SlaveInit() {
	// Set PB6 - MISO output
	DDRB = 1 << DDB6;
  7c:	80 e4       	ldi	r24, 0x40	; 64
  7e:	87 bb       	out	0x17, r24	; 23
	// SPI Clk prescaler
	SPCR = 0b11 << SPR0;
  80:	ed e2       	ldi	r30, 0x2D	; 45
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	83 e0       	ldi	r24, 0x03	; 3
  86:	80 83       	st	Z, r24
	// Enable SPI Mode 0
	SPCR |= 1 << SPE;
  88:	80 81       	ld	r24, Z
  8a:	80 64       	ori	r24, 0x40	; 64
  8c:	80 83       	st	Z, r24
}
  8e:	08 95       	ret

00000090 <SPI_SlaveReceive>:

uint8_t SPI_SlaveReceive() {
	// Wait for reception complete
	while (!(SPSR & 1 << SPIF));
  90:	ee e2       	ldi	r30, 0x2E	; 46
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	88 23       	and	r24, r24
  98:	ec f7       	brge	.-6      	; 0x94 <SPI_SlaveReceive+0x4>
	// Return Data Register
	return SPDR;
  9a:	8f b1       	in	r24, 0x0f	; 15
  9c:	08 95       	ret

0000009e <main>:
uint8_t SPI_SlaveReceive(void);
uint8_t result;
uint8_t tx;

int main(void)
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
	DDRA |= 1 << DDA0;
  a2:	ea e3       	ldi	r30, 0x3A	; 58
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	80 83       	st	Z, r24
    SPI_SlaveInit();
  ac:	0e 94 3e 00 	call	0x7c	; 0x7c <SPI_SlaveInit>
	tx = 0;
  b0:	10 92 60 00 	sts	0x0060, r1
	SPDR = 0x3f;
  b4:	8f e3       	ldi	r24, 0x3F	; 63
  b6:	8f b9       	out	0x0f, r24	; 15
	
    while (1) {
		tx = SPI_SlaveReceive();
		if (tx == 0x8a) {
			PORTA |= 1 << PORTA0;
  b8:	cb e3       	ldi	r28, 0x3B	; 59
  ba:	d0 e0       	ldi	r29, 0x00	; 0
    SPI_SlaveInit();
	tx = 0;
	SPDR = 0x3f;
	
    while (1) {
		tx = SPI_SlaveReceive();
  bc:	0e 94 48 00 	call	0x90	; 0x90 <SPI_SlaveReceive>
  c0:	80 93 60 00 	sts	0x0060, r24
		if (tx == 0x8a) {
  c4:	8a 38       	cpi	r24, 0x8A	; 138
  c6:	d1 f7       	brne	.-12     	; 0xbc <main+0x1e>
			PORTA |= 1 << PORTA0;
  c8:	88 81       	ld	r24, Y
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	88 83       	st	Y, r24
  ce:	f6 cf       	rjmp	.-20     	; 0xbc <main+0x1e>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
