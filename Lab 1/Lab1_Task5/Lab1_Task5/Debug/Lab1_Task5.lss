
Lab1_Task5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000009c  00000000  00000000  00000155  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000061  00000000  00000000  000001f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000b9  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000009f  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000058  00000000  00000000  000003cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  00000423  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
    // PA0 as output for LED
	DDRA |= 1 << DDA0;
  6c:	ea e3       	ldi	r30, 0x3A	; 58
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	80 81       	ld	r24, Z
  72:	81 60       	ori	r24, 0x01	; 1
  74:	80 83       	st	Z, r24
	
	// TIMER0 INIT
	// Mode: normal <= 0x00 << WGM00, WGM01 (default)
	// Clk source = clk/1024 => 15625Hz = 64us/cycle
	// Counting from 0-255 => 64us * 255 = 16320us = 16.32ms
	TCCR0 |= (1 << CS00) | (1 << CS02);
  76:	e3 e5       	ldi	r30, 0x53	; 83
  78:	f0 e0       	ldi	r31, 0x00	; 0
  7a:	80 81       	ld	r24, Z
  7c:	85 60       	ori	r24, 0x05	; 5
  7e:	80 83       	st	Z, r24
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	30 e0       	ldi	r19, 0x00	; 0
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	50 e0       	ldi	r21, 0x00	; 0
	int counter = 0;
	int seconds = 0;
	
    while (1) 
    {
		while (!(TIFR & 1 << TOV0));
  88:	e8 e5       	ldi	r30, 0x58	; 88
  8a:	f0 e0       	ldi	r31, 0x00	; 0
			seconds++;
		}
		
		if (seconds == 1) {
			seconds = 0;
			PORTA ^= 1 << PORTA0;
  8c:	ab e3       	ldi	r26, 0x3B	; 59
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	91 e0       	ldi	r25, 0x01	; 1
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	70 e0       	ldi	r23, 0x00	; 0
	int counter = 0;
	int seconds = 0;
	
    while (1) 
    {
		while (!(TIFR & 1 << TOV0));
  96:	80 81       	ld	r24, Z
  98:	80 ff       	sbrs	r24, 0
  9a:	fd cf       	rjmp	.-6      	; 0x96 <main+0x2a>
		TIFR |= 1 << TOV0;
  9c:	80 81       	ld	r24, Z
  9e:	81 60       	ori	r24, 0x01	; 1
  a0:	80 83       	st	Z, r24
		counter++;
  a2:	2f 5f       	subi	r18, 0xFF	; 255
  a4:	3f 4f       	sbci	r19, 0xFF	; 255
		
		if (counter == 61) {
  a6:	2d 33       	cpi	r18, 0x3D	; 61
  a8:	31 05       	cpc	r19, r1
  aa:	19 f4       	brne	.+6      	; 0xb2 <main+0x46>
			counter = 0;
			seconds++;
  ac:	4f 5f       	subi	r20, 0xFF	; 255
  ae:	5f 4f       	sbci	r21, 0xFF	; 255
  b0:	9b 01       	movw	r18, r22
		}
		
		if (seconds == 1) {
  b2:	41 30       	cpi	r20, 0x01	; 1
  b4:	51 05       	cpc	r21, r1
  b6:	79 f7       	brne	.-34     	; 0x96 <main+0x2a>
			seconds = 0;
			PORTA ^= 1 << PORTA0;
  b8:	8c 91       	ld	r24, X
  ba:	89 27       	eor	r24, r25
  bc:	8c 93       	st	X, r24
  be:	ab 01       	movw	r20, r22
  c0:	ea cf       	rjmp	.-44     	; 0x96 <main+0x2a>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
