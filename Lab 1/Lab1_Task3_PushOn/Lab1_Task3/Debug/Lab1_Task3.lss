
Lab1_Task3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000098  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000007a  00000000  00000000  00000127  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000043  00000000  00000000  000001a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000008f  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000096  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000018  00000000  00000000  0000032a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4a 00 	jmp	0x94	; 0x94 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>

int main(void)
{
	// PA0 as output
    DDRA |= 1 << DDA0;
  6c:	ea e3       	ldi	r30, 0x3A	; 58
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	80 81       	ld	r24, Z
  72:	81 60       	ori	r24, 0x01	; 1
  74:	80 83       	st	Z, r24
	
    while (1) 
    {
		// LED on when pushed, off when released
		if (PINA & 1 << PINA1) {
  76:	a9 e3       	ldi	r26, 0x39	; 57
  78:	b0 e0       	ldi	r27, 0x00	; 0
			PORTA |= 1 << PORTA0;
  7a:	eb e3       	ldi	r30, 0x3B	; 59
  7c:	f0 e0       	ldi	r31, 0x00	; 0
    DDRA |= 1 << DDA0;
	
    while (1) 
    {
		// LED on when pushed, off when released
		if (PINA & 1 << PINA1) {
  7e:	8c 91       	ld	r24, X
  80:	81 ff       	sbrs	r24, 1
  82:	04 c0       	rjmp	.+8      	; 0x8c <main+0x20>
			PORTA |= 1 << PORTA0;
  84:	80 81       	ld	r24, Z
  86:	81 60       	ori	r24, 0x01	; 1
  88:	80 83       	st	Z, r24
  8a:	f9 cf       	rjmp	.-14     	; 0x7e <main+0x12>
		} else {
			PORTA &= ~(1 << PORTA0);
  8c:	80 81       	ld	r24, Z
  8e:	8e 7f       	andi	r24, 0xFE	; 254
  90:	80 83       	st	Z, r24
  92:	f5 cf       	rjmp	.-22     	; 0x7e <main+0x12>

00000094 <_exit>:
  94:	f8 94       	cli

00000096 <__stop_program>:
  96:	ff cf       	rjmp	.-2      	; 0x96 <__stop_program>
