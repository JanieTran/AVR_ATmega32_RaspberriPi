
Lab2_Task5_SPILED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00800060  000001d0  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000077  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000126  00000000  00000000  00000287  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000af  00000000  00000000  000003ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001f6  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00000654  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ea  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000013  00000000  00000000  0000079e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  000007b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  74:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_Init>:
// ADC
//---------------------------------

void ADC_Init() {
	// AREF, Internal Vref turned off
	ADMUX &= ~(0b11 << REFS0);
  7c:	e7 e2       	ldi	r30, 0x27	; 39
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	80 81       	ld	r24, Z
  82:	8f 73       	andi	r24, 0x3F	; 63
  84:	80 83       	st	Z, r24
	// Left Adjust Result
	ADMUX |= 1 << ADLAR;
  86:	80 81       	ld	r24, Z
  88:	80 62       	ori	r24, 0x20	; 32
  8a:	80 83       	st	Z, r24
	
	// ADC Enable
	ADCSRA |= 1 << ADEN;
  8c:	e6 e2       	ldi	r30, 0x26	; 38
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	80 68       	ori	r24, 0x80	; 128
  94:	80 83       	st	Z, r24
	// ADC Prescaler = 128
	ADCSRA |= 0b111 << ADPS0;
  96:	80 81       	ld	r24, Z
  98:	87 60       	ori	r24, 0x07	; 7
  9a:	80 83       	st	Z, r24
}
  9c:	08 95       	ret

0000009e <ADC_Read>:

uint8_t ADC_Read(uint8_t channel) {
	// Select ADC channel
	ADMUX |= channel << MUX0;
  9e:	e7 e2       	ldi	r30, 0x27	; 39
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	90 81       	ld	r25, Z
  a4:	89 2b       	or	r24, r25
  a6:	80 83       	st	Z, r24
	
	// Start single conversion
	ADCSRA |= 1 << ADSC;
  a8:	e6 e2       	ldi	r30, 0x26	; 38
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	// Wait until conversion complete
	while (!(ADCSRA & 1 << ADIF));
  b2:	80 81       	ld	r24, Z
  b4:	84 ff       	sbrs	r24, 4
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <ADC_Read+0x14>
	
	// Clear ADIF
	ADCSRA |= 1 <<  ADIF;
  b8:	e6 e2       	ldi	r30, 0x26	; 38
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	80 61       	ori	r24, 0x10	; 16
  c0:	80 83       	st	Z, r24
	
	return ADCH;
  c2:	85 b1       	in	r24, 0x05	; 5
}
  c4:	08 95       	ret

000000c6 <SPI_SlaveInit>:
// SPI
//---------------------------------

void SPI_SlaveInit() {
	// Set PB6 - MISO output
	DDRB = 1 << DDB6;
  c6:	80 e4       	ldi	r24, 0x40	; 64
  c8:	87 bb       	out	0x17, r24	; 23
	// SPI Clk prescaler
	SPCR = 0b11 << SPR0;
  ca:	ed e2       	ldi	r30, 0x2D	; 45
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	83 e0       	ldi	r24, 0x03	; 3
  d0:	80 83       	st	Z, r24
	// Enable SPI Mode 0
	SPCR |= 1 << SPE;
  d2:	80 81       	ld	r24, Z
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	80 83       	st	Z, r24
}
  d8:	08 95       	ret

000000da <SPI_SlaveReceive>:

uint8_t SPI_SlaveReceive() {
	// Wait for reception complete
	while (!(SPSR & 1 << SPIF));
  da:	ee e2       	ldi	r30, 0x2E	; 46
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	88 23       	and	r24, r24
  e2:	ec f7       	brge	.-6      	; 0xde <SPI_SlaveReceive+0x4>
	// Return Data Register
	return SPDR;
  e4:	8f b1       	in	r24, 0x0f	; 15
  e6:	08 95       	ret

000000e8 <main>:
//================================================================
// MAIN FUNCTION
//================================================================

int main(void)
{
  e8:	ef 92       	push	r14
  ea:	ff 92       	push	r15
  ec:	0f 93       	push	r16
  ee:	1f 93       	push	r17
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
	// PA0 output to LED
    DDRA |= 0b111 << DDA0;
  f4:	ea e3       	ldi	r30, 0x3A	; 58
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	87 60       	ori	r24, 0x07	; 7
  fc:	80 83       	st	Z, r24
	
	// Initialisation
	ADC_Init();
  fe:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_Init>
	SPI_SlaveInit();
 102:	0e 94 63 00 	call	0xc6	; 0xc6 <SPI_SlaveInit>
	
	mode = 0;
 106:	10 92 60 00 	sts	0x0060, r1
	SPDR = 0x00;
 10a:	1f b8       	out	0x0f, r1	; 15
	tx = 0;
 10c:	10 92 61 00 	sts	0x0061, r1
	
    while (1) {						
		tx = SPI_SlaveReceive();
		
		if (tx == 0x19) {
			PORTA ^= 1 << PORTA0;
 110:	cb e3       	ldi	r28, 0x3B	; 59
 112:	d0 e0       	ldi	r29, 0x00	; 0
 114:	11 e0       	ldi	r17, 0x01	; 1
			mode = !mode;
 116:	00 e0       	ldi	r16, 0x00	; 0
		}
		
		if (mode) {
			SPDR = ADC_Read(ADC5_POT);
 118:	0f 2e       	mov	r0, r31
 11a:	ff e2       	ldi	r31, 0x2F	; 47
 11c:	ef 2e       	mov	r14, r31
 11e:	ff 24       	eor	r15, r15
 120:	f0 2d       	mov	r31, r0
	mode = 0;
	SPDR = 0x00;
	tx = 0;
	
    while (1) {						
		tx = SPI_SlaveReceive();
 122:	0e 94 6d 00 	call	0xda	; 0xda <SPI_SlaveReceive>
 126:	80 93 61 00 	sts	0x0061, r24
		
		if (tx == 0x19) {
 12a:	89 31       	cpi	r24, 0x19	; 25
 12c:	59 f4       	brne	.+22     	; 0x144 <main+0x5c>
			PORTA ^= 1 << PORTA0;
 12e:	88 81       	ld	r24, Y
 130:	81 27       	eor	r24, r17
 132:	88 83       	st	Y, r24
			mode = !mode;
 134:	90 2f       	mov	r25, r16
 136:	80 91 60 00 	lds	r24, 0x0060
 13a:	88 23       	and	r24, r24
 13c:	09 f4       	brne	.+2      	; 0x140 <main+0x58>
 13e:	91 2f       	mov	r25, r17
 140:	90 93 60 00 	sts	0x0060, r25
		}
		
		if (mode) {
 144:	80 91 60 00 	lds	r24, 0x0060
 148:	88 23       	and	r24, r24
 14a:	59 f3       	breq	.-42     	; 0x122 <main+0x3a>
			SPDR = ADC_Read(ADC5_POT);
 14c:	85 e0       	ldi	r24, 0x05	; 5
 14e:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_Read>
 152:	f7 01       	movw	r30, r14
 154:	80 83       	st	Z, r24
 156:	e5 cf       	rjmp	.-54     	; 0x122 <main+0x3a>

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
